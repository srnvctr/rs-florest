import {
    addDoc,
    collection,
    doc,
    getDocs,
    setDoc,
    updateDoc,
    deleteDoc,
  } from "firebase/firestore";
  import { db } from "../config";
  
  export interface Doctor {
    id: string;
    name: string;
    specialty: string;
    image: string;
    address: string;
    contact: string;
    briefProfile: string;
  }
  
  export const getDoctorData = async (): Promise<Doctor[]> => {
    try {
      const doctorsCollection = collection(db, "doctors");
      const doctorsSnapshot = await getDocs(doctorsCollection);
  
      const doctorData = doctorsSnapshot.docs.map((doc) => {
        const data = doc.data();
        return {
          id: doc.id,
          address: data.address,
          briefProfile: data.briefProfile,
          contact: data.contact,
          image: data.image,
          name: data.name,
          specialty: data.specialty,
        } as Doctor;
      });
  
      return doctorData || [];
    } catch (error) {
      console.error("Error fetching doctor data:", error);
      return [];
    }
  };
  
  export const getDoctor = async (): Promise<Doctor[]> => {
    try {
      const doctorsCollection = collection(db, "doctors");
      const querySnapshot = await getDocs(doctorsCollection);
  
      if (!querySnapshot.empty) {
        const doctorData = querySnapshot.docs.map((doc) => doc.data() as Doctor);
        return doctorData;
      } else {
        return [];
      }
    } catch (error) {
      console.error("Error fetching doctors:", error);
      return [];
    }
  };
  
  export const createDoctor = async (formData: any): Promise<Doctor[]> => {
    try {
      const doctorsCollection = collection(db, "doctors");
  
      const docRef = await addDoc(doctorsCollection, {
        ...formData,
        id: "",
      });
  
      const autoGeneratedId = docRef.id;
      await updateDoc(docRef, { id: autoGeneratedId });
  
      console.log("New doctor created with ID:", autoGeneratedId);
  
      const doctorData = await getDoctor();
      return doctorData;
    } catch (error) {
      console.error("Error creating doctor:", error);
      return [];
    }
  };
  
  export const updateDoctor = async (id: string, formData: any): Promise<Doctor[]> => {
    try {
      const doctorRef = doc(db, "doctors", id);
      await setDoc(doctorRef, formData, { merge: true });
      console.log(`Doctor with ID ${id} updated successfully.`);
      const doctorData = await getDoctor();
      return doctorData;
    } catch (error) {
      console.error(`Error updating doctor with ID ${id}:`, error);
      return [];
    }
  };
  
  export const deleteDoctor = async (id: string): Promise<Doctor[]> => {
    try {
      const doctorRef = doc(db, "doctors", id);
      await deleteDoc(doctorRef);
      const doctorData = await getDoctor();
      console.log(`Doctor with ID ${id} deleted successfully.`);
      return doctorData;
    } catch (error) {
      console.error(`Error deleting doctor with ID ${id}:`, error);
      return [];
    }
  };
  